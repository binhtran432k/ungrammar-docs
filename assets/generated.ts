//! Generated by `codegen`, do not edit by hand.

import type { SyntaxNodeRef, TreeCursor } from "@lezer/common";

export interface AstAcceptor {
	syntax: SyntaxNodeRef;
	accept(visitor: AstVisitor): void;
	getChildren(): AstAcceptor[];
}

export abstract class AstVisitor {
	visitGrammar(acceptor: Grammar): void {
		for (const c of acceptor.getChildren()) {
			c.accept(this);
		}
	}
	// 56 lines hided
	abstract visitIdentifier(acceptor: Identifier): void;
	abstract visitToken(acceptor: Token): void;
}

export class Grammar implements AstAcceptor {
	syntax: SyntaxNodeRef;

	nodes: Node[] = [];

	constructor(cursor: TreeCursor, unknowns: SyntaxNodeRef[]) {
		this.syntax = cursor.node;
		if (cursor.firstChild()) {
			do {
				if (Node.canCast(cursor)) {
					this.nodes.push(new Node(cursor, unknowns));
				} else {
					unknowns.push(cursor.node);
				}
			} while (cursor.nextSibling());
			cursor.parent();
		}
	}

	static canCast(nodeRef: SyntaxNodeRef) {
		return nodeRef.type.is("Grammar");
	}

	accept(visitor: AstVisitor) {
		return visitor.visitGrammar(this);
	}

	getChildren(): AstAcceptor[] {
		return [...this.nodes].filter((a): a is AstAcceptor => a !== undefined);
	}
}

// 401 lines hided
